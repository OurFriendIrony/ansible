{{ note.cfg }}

tailc() {
  # Standard tail but with colour for "log level/severity"
  tail ${@} | \
    sed --unbuffered \
      -e 's/\(.*ERROR.*\)/\o033[31m\1\o033[39m/' \
      -e 's/\(.*WARN.*\)/\o033[33m\1\o033[39m/'  \
      -e 's/\(.*INFO.*\)/\o033[32m\1\o033[39m/'
}

stopwatchstart() {
  stopwatchstart=$(date +%s%3N)
  stopwatchstop=0
}

stopwatchstop() {
  stopwatchstop=$(date +%s%3N)
  if [[ -n "${stopwatchstart}" ]]; then
    stopwatchdiff_ms=$(( stopwatchstop - stopwatchstart ))
    stopwatchdiff_s=$(( stopwatchdiff_ms / 1000 ))
    echo "Took ${stopwatchdiff_ms}ms / ${stopwatchdiff_s}s"
  else
  # Incase we forgot to start the stopwatch
    echo "You didn't start the stopwatch..."
  fi
# Reset incase we want multiple timings
  stopwatchstart=${stopwatchstop}
}

gitremoveoldbranches() {
  # Fetch and Prune refs from all remote repos
  for repo in $(git r -v | awk '{print $1}' | uniq); do
    git fetch ${repo}
    git remote prune ${repo}
  done

  # Find and remove orphaned branches
  for branch in $(git branch -v | awk '{print $1" "$3}' | grep "\[gone\]" | awk '{print $1}'); do
    git branch -D ${branch}
  done
}

echo_r(){ echo -e "\e[31m${@}\e[0m";}
echo_g(){ echo -e "\e[32m${@}\e[0m";}
echo_y(){ echo -e "\e[33m${@}\e[0m";}
echo_b(){ echo -e "\e[34m${@}\e[0m";}

set_tfenv(){
  if [[ -z "${1}" ]]; then
    e="data"
  else
    e="${1}"
  fi
  export TF_VAR_env_file="${e}"
  echo_b "- TF_VAR_env_file: ${TF_VAR_env_file}"
}


set_tgver(){
  #################################
  # Terraform     Terragrunt
  #################################
  # 1.0.x         >= 0.31.0
  # 0.15.x        >= 0.29.0
  # 0.14.x        >= 0.27.0
  # 0.13.x        >= 0.25.0
  # 0.12.x        0.19.0 - 0.24.4
  # 0.11.x        0.14.0 - 0.18.7
  #################################

  tf_ver_raw=$(terraform --version)
  tf_stat="$?"

  tg_ver_raw=$(terragrunt --version)
  tg_stat="$?"

  if [[ "${tf_stat}" == "0" && "${tg_stat}" == "0" ]]; then
    tf_ver=$(echo ${tf_ver_raw} | grep "Terraform v"| awk -F'Terraform v' '{print $2}' | awk '{print $1}')
    tg_ver=$(echo ${tg_ver_raw} | grep "terragrunt version v"| awk -F'terragrunt version v' '{print $2}' | awk '{print $1}')
    tf_ver_maj=$(echo ${tf_ver} | awk -F'.' '{print $1}')
    tf_ver_min=$(echo ${tf_ver} | awk -F'.' '{print $2}')
    tf_ver_pat=$(echo ${tf_ver} | awk -F'.' '{print $3}')

    # Check version compatability
    if   [[ ${tf_ver_maj} -eq 0 && ${tf_ver_min} -eq 11 ]]; then
      tg_ver_need="0.18.7"
    elif [[ ${tf_ver_maj} -eq 0 && ${tf_ver_min} -eq 12 ]]; then
      tg_ver_need="0.24.4"
    elif [[ ${tf_ver_maj} -eq 0 && ${tf_ver_min} -ge 13 ]]; then
      tg_ver_need="0.31.10"
    elif [[ ${tf_ver_maj} -eq 1 ]]; then
      tg_ver_need="0.31.10"
    else
      tg_ver_need="?"
    fi

    # If thats not the version we have, set it
    if [[ "${tg_ver_need}" != "?" ]]; then
      if [[ "${tg_ver_need}" != "${tg_ver}" ]]; then
        if [[ ! -d "{{ terragrunt.home }}/${tg_ver_need}" ]]; then
          mkdir -p "{{ terragrunt.home }}/${tg_ver_need}"
          wget -q {{ terragrunt.url  }}/v${tg_ver_need}/terragrunt_linux_amd64 -O {{ terragrunt.home }}/${tg_ver_need}/terragrunt
          chmod +x {{ terragrunt.home }}/${tg_ver_need}/terragrunt
        fi
        ln -sf {{ terragrunt.home }}/${tg_ver_need}/terragrunt {{ terragrunt.home }}/terragrunt
      fi
      echo_b "- Terraform: ${tf_ver}/ Terragrunt: ${tg_ver_need}"
    else
      echo_r "- Issue with Terraform(v${tf_ver}) or Terragrunt(v${tg_ver} -> v${tg_ver_need:=?})"
    fi
  else
    echo_r "- Issue with Terraform(${tf_stat}) or Terragrunt(${tg_stat})"
  fi
}

